<div class="modal" style="display: @(_isOpen ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Invalid Input Received</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="CloseModalAsync">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="validation-message">Reasons:</p>
                @if(_validationFailureResponse != null && _validationFailureResponse.ValidationFailureReasons.Any())
                {
                    <ul>
                        @foreach (var reason in _validationFailureResponse.ValidationFailureReasons)
                        {
                            <li class="validation-message">
                                <p class="validation-message">
                                    @reason
                                </p>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="validation-message">Unknown</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModalAsync">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback IsOpenChanged { get; set; }

    private bool _isOpen = false;

    private ValidationFailureResponse? _validationFailureResponse;

    public async Task OpenModalAsync(ValidationFailureResponse validationFailureResponse)
    {
        _validationFailureResponse = validationFailureResponse;

        _isOpen = true;

        await IsOpenChanged.InvokeAsync();
    }

    private async Task CloseModalAsync()
    {
        _isOpen = false;

        _validationFailureResponse = null;

        await IsOpenChanged.InvokeAsync();
    }
}
