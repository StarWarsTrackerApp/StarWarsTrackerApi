@page "/Events/GetEventsByName"

@using StarWarsTracker.ApiCaller.StarWarsTrackerApi.Events.GetByNameLike
@using StarWarsTracker.BlazorServer.Components;
@using StarWarsTracker.BlazorServer.Components.Popups;
@using StarWarsTracker.Domain.Extensions;
@using StarWarsTracker.Domain.Models

@inject IApiCaller ApiCaller;

<h3>Search Events By Name</h3>

<input @bind="_name"/>
<button class="btn btn-primary" @onclick="SearchAsync">Search</button>

<ValidationFailureResponsePopup @ref="_validationPopup" IsOpenChanged="StateHasChanged" />

@if(_eventsFound == null)
{
    <p>Enter the name of an Event to search for.</p>
}
else if (_eventsFound == false)
{
    <p>No Events Found With EventName Containing: @_name</p>
}
else if(_eventsFound == true)
{
    <SearchResultTablets SearchResults="GetSearchResults()" />    
}

@code {

    #region Private Members

    private string _name = string.Empty;

    private bool? _eventsFound = null;

    private IEnumerable<Event> _events = Enumerable.Empty<Event>();

    private ValidationFailureResponsePopup _validationPopup = new();

    #endregion

    #region Search Functionality

    private async Task SearchAsync()
    {
        var response = await ApiCaller.GetResponseAsync(new GetEventsByNameLikeRequest(_name));

        if(response is GetResponse<GetEventsByNameLikeResponse> r)
        {
            if(r.Value.Events.Any())
            {
                _eventsFound = true;
                _events = r.Value.Events;
            }
            else
            {
                _eventsFound = false;
            }
        }
        else if(response is ValidationFailureResponse v)
        {
            await _validationPopup.OpenModalAsync(v);
            _eventsFound = null;
        }
        else if(response is NotFoundResponse)
        {
            _eventsFound = false;
        }
        else
        {
            if(response is UnexpectedResponse u)
            {
                //TODO: Unexpected Response Handling
            }

            _eventsFound = false;
        }
    }

    private IEnumerable<SearchResultTablets.SearchResult> GetSearchResults()
    {
        if(_events.Any())
        {
            return _events.Select(_ => new SearchResultTablets.SearchResult($"{_.Name} | {_.CanonType.GetEnumDescription()}", _.Description, ""));
        }

        return Enumerable.Empty<SearchResultTablets.SearchResult>();
    }

#endregion
}
